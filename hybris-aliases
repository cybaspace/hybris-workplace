# To use the aliases from this file the 'bin/y' file must be in $PATH

# Display help about the aliases
alias yhelp='_yhelp $1'                    ## show help about defined aliases

# Update the installation
alias yupdate='cd $HOME/.hybris-workplace; git pull; if [[ $? == 0 ]]; then; echo "Updated hybris workplace, changes will take effect in new console session"; fi'  ## updates the actual hybris workplace installation

# hybris logging
alias ylf='y log'                                                                                          ## shows the hybris tomcat console logging with 'tail -f'
alias yln='y log $1'                                                                                       ## shows the hybris tomcat console logging with 'tail -f' and the given number of past lines
alias ylg='log_path=`y dir tomcat-log`;grep -i "$1" $log_path/console-$(date +%Y%m%d).log'                 ## greps the given pattern from actual hybris tomcat console
alias ylfg='y log | grep -i "$1"'                                                                          ## greps the given pattern from upcoming logging of actual hybris tomcat console

# hybris directories
alias ydp='_ycd platform'   ## cd to hybris platform dir
alias ydy='_ycd hybris'     ## cd to hybris root dir
alias ydr='_ycd project'    ## cd to project root dir
alias ydt='_ycd tomcat'     ## cd to platform tomcat dir
alias ydd='_ycd data'       ## cd to hybris data dir
alias ydl='_ycd log'        ## cd to hybris log dir
alias ydc='_ycd config'     ## cd to hybris config dir
alias ydb='_ycd bin'        ## cd to hybris bin dir
alias yde='_yde $1'         ## cd to hybris extension specified by given parameter

# hybris unit tests
alias yup='y unittests package $1'         ## hybris unit tests with name of package to test (yup com.hybris.* <=> ant unittests -Dtestclasses.packages=<e.g. com.hybris.*>
alias yue='y unittests extension $1'       ## hybris unit tests with name of extension to test (yue mycore <=> ant unittests -Dtestclasses.extensions=<e.g. mycore>

# hybris ant operations
alias ya='y ant'                           ## hybris ant with ant command(s) (ant <e.g. clean all>
alias yab='y ant build'                    ## hybris ant build
alias yacb='y ant clean build'             ## hybris ant clean build
alias yaca='y ant clean all'               ## hybris ant clean all
alias yai='y ant initialize'               ## hybris ant initialize
alias yaif='y ant initialize | tee init.log  ## hybris ant intialize and write to init.log

# hybris server
alias yss='y server start'                 ## start hybris server (same as: hybris/bin/platform/hybrisserver.sh start)
alias ysp='y server stop'                  ## stop  hybris server (same as: hybris/bin/platform/hybrisserver.sh stop)
alias ysr='y server stop; y server start'  ## restart hybris server (stop and start / no console logging / no debug mode)
alias ysd='y server debug'                 ## start hybris server in debug mode
alias ysc='y server console'               ## start hybris server with logging to console
alias yst='curl -m 1 -ksSf https://localhost:9002/hac >/dev/null 2>&1; if [[ $? == 0 ]]; then; echo "Hybris server is up and running"; else; echo "Hybris server is not running"; fi'  ## test if the hybris server (HAC) is running
alias ystf='curl -m 1 -ksSf https://localhost:9002/hac >/dev/null 2>&1; while [[ $? != 0 ]]; do; curl -m 1 -ksSf https://localhost:9002/hac >/dev/null 2>&1; done; date "+%H:%M:%S"" Hybris server is up and running"'  ## test if the hybris server (HAC) is running, if not waits until it has been started - then prints a message

function _yhelp() {
  searchterm='.'
  if [[ -n $1 ]]; then
    searchterm="$1"
  fi
  grep -i '^alias ' ~/.hybris-workplace/hybris-aliases | grep '## ' | sed 's/alias //' | sed 's/=.*## /\t: /' | grep -i "$searchterm"
}

function _ycd() {
  dir=$(y dir $1)
  if [[ -d "$dir" ]]; then
    builtin cd "$dir"
  else
    echo "$dir"
  fi
}

# used to cd to a named extension
function _yde() {
  if [[ -z $1 ]]; then
    echo "Specify the name of the extension to change directory"
    return
  fi
  ext_name=$1
  # find directory of the extension named by first parameter
  ext_path=`y dir extension $ext_name`
  if [[ -d "$ext_path" ]]; then
    builtin cd "$ext_path"
  else
    echo "No extension with name '$ext_name' found"
  fi
}
